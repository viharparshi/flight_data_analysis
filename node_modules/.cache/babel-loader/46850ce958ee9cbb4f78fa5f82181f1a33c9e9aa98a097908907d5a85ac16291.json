{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nexports.getPercentageFromPosition = getPercentageFromPosition;\nexports.getValueFromPosition = getValueFromPosition;\nexports.getValueFromProps = getValueFromProps;\nexports.getPercentageFromValue = getPercentageFromValue;\nexports.getPercentagesFromValues = getPercentagesFromValues;\nexports.getPositionFromValue = getPositionFromValue;\nexports.getPositionsFromValues = getPositionsFromValues;\nexports.getPositionFromEvent = getPositionFromEvent;\nexports.getStepValueFromValue = getStepValueFromValue;\nvar _utils = require('../utils');\n\n/**\n * Convert a point into a percentage value\n * @ignore\n * @param {Point} position\n * @param {ClientRect} clientRect\n * @return {number} Percentage value\n */\nfunction getPercentageFromPosition(position, clientRect) {\n  var length = clientRect.width;\n  var sizePerc = position.x / length;\n  return sizePerc || 0;\n}\n\n/**\n * Convert a point into a model value\n * @ignore\n * @param {Point} position\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {number}\n */\nfunction getValueFromPosition(position, minValue, maxValue, clientRect) {\n  var sizePerc = getPercentageFromPosition(position, clientRect);\n  var valueDiff = maxValue - minValue;\n  return minValue + valueDiff * sizePerc;\n}\n\n/**\n * Convert props into a range value\n * @ignore\n * @param {Object} props\n * @param {boolean} isMultiValue\n * @return {Range}\n */\nfunction getValueFromProps(props, isMultiValue) {\n  if (isMultiValue) {\n    return _extends({}, props.value);\n  }\n  return {\n    min: props.minValue,\n    max: props.value\n  };\n}\n\n/**\n * Convert a model value into a percentage value\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @return {number}\n */\nfunction getPercentageFromValue(value, minValue, maxValue) {\n  var validValue = (0, _utils.clamp)(value, minValue, maxValue);\n  var valueDiff = maxValue - minValue;\n  var valuePerc = (validValue - minValue) / valueDiff;\n  return valuePerc || 0;\n}\n\n/**\n * Convert model values into percentage values\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @return {Range}\n */\nfunction getPercentagesFromValues(values, minValue, maxValue) {\n  return {\n    min: getPercentageFromValue(values.min, minValue, maxValue),\n    max: getPercentageFromValue(values.max, minValue, maxValue)\n  };\n}\n\n/**\n * Convert a value into a point\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Point} Position\n */\nfunction getPositionFromValue(value, minValue, maxValue, clientRect) {\n  var length = clientRect.width;\n  var valuePerc = getPercentageFromValue(value, minValue, maxValue);\n  var positionValue = valuePerc * length;\n  return {\n    x: positionValue,\n    y: 0\n  };\n}\n\n/**\n * Convert a range of values into points\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Range}\n */\nfunction getPositionsFromValues(values, minValue, maxValue, clientRect) {\n  return {\n    min: getPositionFromValue(values.min, minValue, maxValue, clientRect),\n    max: getPositionFromValue(values.max, minValue, maxValue, clientRect)\n  };\n}\n\n/**\n * Convert an event into a point\n * @ignore\n * @param {Event} event\n * @param {ClientRect} clientRect\n * @return {Point}\n */\nfunction getPositionFromEvent(event, clientRect) {\n  var length = clientRect.width;\n  var _ref = event.touches ? event.touches[0] : event,\n    clientX = _ref.clientX;\n  return {\n    x: (0, _utils.clamp)(clientX - clientRect.left, 0, length),\n    y: 0\n  };\n}\n\n/**\n * Convert a value into a step value\n * @ignore\n * @param {number} value\n * @param {number} valuePerStep\n * @return {number}\n */\nfunction getStepValueFromValue(value, valuePerStep) {\n  return Math.round(value / valuePerStep) * valuePerStep;\n}","map":{"version":3,"names":["getPercentageFromPosition","getValueFromPosition","getValueFromProps","getPercentageFromValue","getPercentagesFromValues","getPositionFromValue","getPositionsFromValues","getPositionFromEvent","getStepValueFromValue","_utils","require","position","clientRect","length","width","sizePerc","x","minValue","maxValue","valueDiff","props","isMultiValue","_extends","value","min","max","validValue","clamp","valuePerc","values","positionValue","y","event","_ref","touches","clientX","left","valuePerStep","Math","round"],"sources":["/Users/viharparshi/Desktop/flight_data_analysis/node_modules/react-input-range/src/js/input-range/value-transformer.js"],"sourcesContent":["import { clamp } from '../utils';\n\n/**\n * Convert a point into a percentage value\n * @ignore\n * @param {Point} position\n * @param {ClientRect} clientRect\n * @return {number} Percentage value\n */\nexport function getPercentageFromPosition(position, clientRect) {\n  const length = clientRect.width;\n  const sizePerc = position.x / length;\n\n  return sizePerc || 0;\n}\n\n/**\n * Convert a point into a model value\n * @ignore\n * @param {Point} position\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {number}\n */\nexport function getValueFromPosition(position, minValue, maxValue, clientRect) {\n  const sizePerc = getPercentageFromPosition(position, clientRect);\n  const valueDiff = maxValue - minValue;\n\n  return minValue + (valueDiff * sizePerc);\n}\n\n/**\n * Convert props into a range value\n * @ignore\n * @param {Object} props\n * @param {boolean} isMultiValue\n * @return {Range}\n */\nexport function getValueFromProps(props, isMultiValue) {\n  if (isMultiValue) {\n    return { ...props.value };\n  }\n\n  return {\n    min: props.minValue,\n    max: props.value,\n  };\n}\n\n/**\n * Convert a model value into a percentage value\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @return {number}\n */\nexport function getPercentageFromValue(value, minValue, maxValue) {\n  const validValue = clamp(value, minValue, maxValue);\n  const valueDiff = maxValue - minValue;\n  const valuePerc = (validValue - minValue) / valueDiff;\n\n  return valuePerc || 0;\n}\n\n/**\n * Convert model values into percentage values\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @return {Range}\n */\nexport function getPercentagesFromValues(values, minValue, maxValue) {\n  return {\n    min: getPercentageFromValue(values.min, minValue, maxValue),\n    max: getPercentageFromValue(values.max, minValue, maxValue),\n  };\n}\n\n/**\n * Convert a value into a point\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Point} Position\n */\nexport function getPositionFromValue(value, minValue, maxValue, clientRect) {\n  const length = clientRect.width;\n  const valuePerc = getPercentageFromValue(value, minValue, maxValue);\n  const positionValue = valuePerc * length;\n\n  return {\n    x: positionValue,\n    y: 0,\n  };\n}\n\n/**\n * Convert a range of values into points\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Range}\n */\nexport function getPositionsFromValues(values, minValue, maxValue, clientRect) {\n  return {\n    min: getPositionFromValue(values.min, minValue, maxValue, clientRect),\n    max: getPositionFromValue(values.max, minValue, maxValue, clientRect),\n  };\n}\n\n/**\n * Convert an event into a point\n * @ignore\n * @param {Event} event\n * @param {ClientRect} clientRect\n * @return {Point}\n */\nexport function getPositionFromEvent(event, clientRect) {\n  const length = clientRect.width;\n  const { clientX } = event.touches ? event.touches[0] : event;\n\n  return {\n    x: clamp(clientX - clientRect.left, 0, length),\n    y: 0,\n  };\n}\n\n/**\n * Convert a value into a step value\n * @ignore\n * @param {number} value\n * @param {number} valuePerStep\n * @return {number}\n */\nexport function getStepValueFromValue(value, valuePerStep) {\n  return Math.round(value / valuePerStep) * valuePerStep;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}